<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--将数据库配置信息写在一个独立的文件，便于管理
    步骤：让spring知晓jdbc.properties的位置-->

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--申明数据源DataSource，作用是连接数据库的-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">

    <!--使用配置文件中数据-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="20"/>
        <!--set注入-->
        <!--
        <property name="url" value="jdbc:mysql://localhost:3306/springdb?useUnicode=true &amp; characterEncoding=utf8 &amp; serverTimezone=GMT &amp; useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="83116060"/>
        <property name="maxActive" value="20"/>
        -->
    </bean>

    <!--申明mybatis中提供的SqlSessionFactoryBean类，在类的内部创建SessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，将数据库连接池付给了dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--mybatis主配置文件位置
        configLocation属性是Resource类型，读取配置文件
        使用classpath表示文件位置-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao对象，使用sqlSession的getMapper（StudentDao.class）
    MapperScannerConfigurer在内部使用getMapper生成每个dao接口的代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定dao接口所在的包名
        MapperScannerConfigurer会扫描这个包中的所有接口
        每个接口都执行一次getMapper方法，得到每个接口的dao对象,dao对象默认名称为其首字母小写
        创建好的dao对象放入spring容器中-->
        <property name="basePackage" value="com.example.dao"/>
    </bean>

    <!--申明service-->
    <bean id="buyGoodsService" class="com.example.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!--申明事务处理，与源代码完全分离-->
    <!--1、申明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2、申明业务方法事务属性（隔离级别，传播级别，传播时间）
        id自定义名称，表示<tx:advice>之间的配置内容
        transaction-manager事务管理对象id
    -->
    <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
<!--        <tx:attributes>配置事务属性-->
        <tx:attributes>
<!--            tx:method给具体方法配置事务属性
        name:1、完整方法名称，不带包与类
             2、使用通配符，*表任意字符
        propagation传播行为
        isolation隔离级别
        rollback-for指定异常类名，全限定类名，发生异常回滚
-->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.NullPointerException,com.example.execption.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>

    <!--3、配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类要使用事务
        id：切入点表达式名称，唯一值
        expression切入点表达式，指定哪些类使用事务，aspectj会创建代理对象-->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>

        <!--配置增强器：关联advice与pointcut
        advice-ref通知，即tx advice处id
        pointcut-ref切入点表达式id
        -->
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="servicePt"/>

    </aop:config>

</beans>